[{"C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\App.js":"1","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\header.js":"3","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\index.js":"4","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\Header.js":"5","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\Pay.js":"6","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\TokenList.js":"7","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\utils\\useTokens.js":"8","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\utils\\fetcher.js":"9"},{"size":850,"mtime":1612377251884,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1612187817647,"results":"12","hashOfConfig":"11"},{"size":522,"mtime":1612267761016,"results":"13","hashOfConfig":"14"},{"size":543,"mtime":1612270295590,"results":"15","hashOfConfig":"11"},{"size":1404,"mtime":1612392093118,"results":"16","hashOfConfig":"11"},{"size":3033,"mtime":1612392075587,"results":"17","hashOfConfig":"11"},{"size":2652,"mtime":1612432191625,"results":"18","hashOfConfig":"11"},{"size":3013,"mtime":1612432024842,"results":"19","hashOfConfig":"11"},{"size":457,"mtime":1612407021101,"results":"20","hashOfConfig":"11"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1bsxzpf",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hq9uk9",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\App.js",[],["43","44"],"C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\header.js",[],"C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\index.js",[],"C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\Header.js",[],"C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\Pay.js",["45"],"import React, { useState } from \"react\";\r\nimport TokenList from \"./TokenList\";\r\n//MUI stuff\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n//Web3React Stuff\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\r\n\r\nconst styles = {\r\n  pay: {\r\n    display: \"inline-block\",\r\n    position: \"relative\",\r\n    top: \"4rem\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    padding: \"1rem\",\r\n    borderRadius: \"30px\",\r\n    width: \"23rem\",\r\n  },\r\n  token: {\r\n    borderRadius: 20,\r\n    border: \"1px solid rgb(247, 248, 250)\",\r\n    padding: \"1rem 1rem\",\r\n    position: \"relative\",\r\n    \"& div\": {\r\n      justifyContent: \"space-between\",\r\n      display: \"flex\",\r\n    },\r\n    \"& span\": {\r\n      fontSize: \"20px\",\r\n    },\r\n  },\r\n  tokenSymbol: {\r\n    fontWeight: \"500\",\r\n  },\r\n  payBtn: {\r\n    marginTop: \"1rem\",\r\n  },\r\n  usdEqv: {\r\n    position: \"absolute\",\r\n    right: 10,\r\n    top: 3,\r\n  },\r\n};\r\n\r\nconst Pay = ({ classes }) => {\r\n  //hooks\r\n  const [tokenListOpen, setTokenListOpen] = useState(false);\r\n  const { activate, active, account } = useWeb3React();\r\n\r\n  const injected = new InjectedConnector({\r\n    supportedChainIds: [1, 3, 4, 5, 42],\r\n  });\r\n\r\n  const connectWalletBtn = (\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      fullWidth\r\n      size=\"large\"\r\n      onClick={() => activate(injected)}\r\n    >\r\n      Connect Wallet\r\n    </Button>\r\n  );\r\n\r\n  const payBtn = (\r\n    <Button variant=\"contained\" color=\"primary\" fullWidth size=\"large\">\r\n      Pay\r\n    </Button>\r\n  );\r\n\r\n  const handleTokenListOpen = () => {\r\n    setTokenListOpen(true);\r\n  };\r\n\r\n  const handleTokenListClose = () => {\r\n    setTokenListOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.pay}>\r\n      <div className={classes.token}>\r\n        <Typography variant=\"h6\">Pay</Typography>\r\n        <div>\r\n          <span>0.0</span>\r\n          <span className={classes.tokenSymbol}>USD</span>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div className={classes.token}>\r\n        <Typography variant=\"h6\">With</Typography>\r\n        <div>\r\n          <span className={classes.input}>0.0</span>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            endIcon={<ExpandMore />}\r\n            onClick={handleTokenListOpen}\r\n          >\r\n            ETH\r\n          </Button>\r\n          <Typography className={classes.usdEqv} variant=\"subtitle2\">\r\n            USD 0.0 (inl. 1% slippage tolerance)\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n      {console.log(active)}\r\n      <div className={classes.payBtn}>{active ? payBtn : connectWalletBtn}</div>\r\n      <TokenList open={tokenListOpen} handleClose={handleTokenListClose} />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Pay);\r\n","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\components\\TokenList.js",["46","47","48"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport useTokens from \"../utils/useTokens\";\r\n\r\n//MUI stuff\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n//MUI icons\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst styles = {\r\n  dialog: {\r\n    position: \"relative\",\r\n  },\r\n  dialogTitle: {\r\n    width: \"23rem\",\r\n  },\r\n  listItemText: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n  },\r\n  closeBtn: {\r\n    position: \"absolute\",\r\n    right: 10,\r\n    top: 3,\r\n  },\r\n  tokenImg: {\r\n    width: 24,\r\n    height: 24,\r\n    borderRadius: 24,\r\n    boxShadow: \"rgb(0 0 0 / 8%) 0px 6px 10px\",\r\n    backgroundColor: \"rgb(255, 255, 255)\",\r\n  },\r\n};\r\n\r\nconst TokenList = ({ classes, open, handleClose }) => {\r\n  const tokens = useTokens();\r\n  const tokensMarkup = tokens.map((token) => (\r\n    <ListItem button key={token.address}>\r\n      <ListItemIcon>\r\n        <img\r\n          alt=\"token_logo\"\r\n          src={token.logoURI}\r\n          className={classes.tokenImg}\r\n        />\r\n      </ListItemIcon>\r\n      <div className={classes.listItemText}>\r\n        <Typography variant=\"h6\">\r\n          {token.symbol} {token.balance ? token.balance : \"\"}\r\n        </Typography>\r\n        <Typography variant=\"h6\">\r\n          ${\" \"}\r\n          {token.balance && token.price ? token.price.usd * token.balance : \"\"}\r\n        </Typography>{\" \"}\r\n      </div>\r\n    </ListItem>\r\n  ));\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n      className={classes.dialog}\r\n    >\r\n      <DialogTitle className={classes.dialogTitle}>Select Token </DialogTitle>\r\n      <List>{tokensMarkup}</List>\r\n      <IconButton\r\n        onClick={handleClose}\r\n        aria-label=\"close\"\r\n        className={classes.closeBtn}\r\n      >\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nTokenList.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(TokenList);\r\n","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\utils\\useTokens.js",["49"],"import { useState, useEffect } from \"react\";\r\nimport fetcher from \"./fetcher\";\r\nimport erc20 from \"./abis/@openzeppelin/contracts/token/ERC20/ERC20.sol/ERC20.json\";\r\nimport axios from \"axios\";\r\nimport ethImage from \"../images/eth-symbol.png\";\r\n//Ethersjs stuff\r\nimport { formatUnits } from \"@ethersproject/units\";\r\n//Web3React stuff\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nconst initialTokens = [\r\n  {\r\n    name1: \"Ether\",\r\n    name2: \"ethereum\",\r\n    symbol: \"ETH\",\r\n    logoURI: ethImage,\r\n  },\r\n  {\r\n    name1: \"Wrapped Ether\",\r\n    name2: \"weth\",\r\n    address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\r\n    symbol: \"WETH\",\r\n    decimals: 18,\r\n    chainId: 3,\r\n    logoURI:\r\n      \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\",\r\n  },\r\n  {\r\n    name1: \"Dai Stablecoin\",\r\n    name2: \"dai\",\r\n    address: \"0xaD6D458402F60fD3Bd25163575031ACDce07538D\",\r\n    symbol: \"DAI\",\r\n    decimals: 18,\r\n    chainId: 3,\r\n    logoURI:\r\n      \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png\",\r\n  },\r\n  {\r\n    name1: \"Uniswap\",\r\n    name2: \"uniswap\",\r\n    address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n    symbol: \"UNI\",\r\n    decimals: 18,\r\n    chainId: 3,\r\n    logoURI:\r\n      \"https://cloudflare-ipfs.com/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg/\",\r\n  },\r\n];\r\n\r\nexport default function useTokens() {\r\n  const { active, account, library } = useWeb3React();\r\n  const [price, setPrice] = useState(false);\r\n  const [balance, setBalance] = useState(false);\r\n  let [tokens, setTokens] = useState(initialTokens);\r\n\r\n  useEffect(() => {\r\n    if (!active || balance) return;\r\n    const tokenBalances = tokens.map((token) => {\r\n      if (token.name1 === \"Ether\") {\r\n        return fetcher(library, \"getBalance\", account);\r\n      }\r\n      return fetcher(library, token.address, erc20.abi, \"balanceOf\", account);\r\n    });\r\n\r\n    let newTokens;\r\n    Promise.all(tokenBalances).then((balances) => {\r\n      balances.forEach((balance) => {\r\n        newTokens = tokens.map((token) => ({\r\n          ...token,\r\n          balance: formatUnits(balance, 18),\r\n        }));\r\n      });\r\n      setTokens(newTokens);\r\n    });\r\n\r\n    setBalance(true);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (price) return;\r\n    axios\r\n      .get(\"https://api.coingecko.com/api/v3/simple/price\", {\r\n        params: {\r\n          ids: tokens.map((token) => token.name2).join(\",\"),\r\n          vs_currencies: \"usd\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        const prices = res.data;\r\n        const newTokens = [...tokens];\r\n        for (const [tokenName, price] of Object.entries(prices)) {\r\n          const token = newTokens.find((token) => token.name2 === tokenName);\r\n          token.price = price;\r\n        }\r\n        setPrice(true);\r\n        setTokens(newTokens);\r\n      });\r\n  });\r\n\r\n  console.log(tokens);\r\n  return tokens;\r\n}\r\n","C:\\Users\\user\\Desktop\\QuickZap\\web3Interface\\src\\utils\\fetcher.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":53,"column":29,"nodeType":"56","messageId":"57","endLine":53,"endColumn":36},{"ruleId":"54","severity":1,"message":"58","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":14},{"ruleId":"54","severity":1,"message":"59","line":11,"column":8,"nodeType":"56","messageId":"57","endLine":11,"endColumn":20},{"ruleId":"54","severity":1,"message":"60","line":18,"column":8,"nodeType":"56","messageId":"57","endLine":18,"endColumn":26},{"ruleId":"61","severity":1,"message":"62","line":56,"column":3,"nodeType":"56","endLine":56,"endColumn":12,"suggestions":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'account' is assigned a value but never used.","Identifier","unusedVar","'Button' is defined but never used.","'ListItemText' is defined but never used.","'MonetizationOnIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setBalance'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [active, balance, tokens, library, account] as a second argument to the useEffect Hook.",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Add dependencies array: [active, balance, tokens, library, account]",{"range":"69","text":"70"},[2343,2343],", [active, balance, tokens, library, account]"]